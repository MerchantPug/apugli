buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id 'java'
    id 'net.minecraftforge.gradle' version '5.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'eclipse'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = "${mod_name}"
version = "${rootProject.version}+${minecraft_version}-forge"

jarJar.enable()

repositories {
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven { url 'https://maven.theillusivec4.top' }

    maven {
        name = "JitPack"
        url = 'https://jitpack.io'
    }
    flatDir {
        dirs "$rootDir/libs"
    }
}

mixin {
    add sourceSets.main, "apugli.refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    if(project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.test"
            taskName 'Client'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":Common").sourceSets.main
                    source project(":Common").sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.test"
            taskName 'Server'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source sourceSets.test
                    source project(":Common").sourceSets.main
                    source project(":Common").sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            args "-mixin.config=${mod_id}.mixins.json", "-mixin.config=${mod_id}.forge.mixins.json"
            mods {
                create(mod_id) {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    //Forge
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //Apoli
    implementation fg.deobf("io.github.edwinmindcraft:calio-forge:${minecraft_version}-${calio_forge_version}")
    implementation fg.deobf("io.github.edwinmindcraft:apoli-forge:${minecraft_version}-${apoli_forge_version}")
    // Caelus
    implementation fg.deobf("top.theillusivec4.caelus:caelus-forge:${minecraft_version}-${caelus_version}")
    //MixinExtras
    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
        jarJar.ranged(it, "[${mixin_extras_version},)")
    }
    //Mixin
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //Service
    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    //Relying on the Common Project for sure
    implementation project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(':Common').sourceSets.main.resources

    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }

    filesMatching('*.mixins.json') {
        expand 'refmap_target': "${mod_id}."
    }
}

processTestResources {
    outputs.upToDateWhen { false }
    from project(":Common").sourceSets.test.resources

    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}

tasks.jarJar.configure {
    archiveClassifier = ""
}

reobf {
    jarJar {}
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}