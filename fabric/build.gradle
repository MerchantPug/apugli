import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id "net.darkhax.curseforgegradle" version "1.0.7"
    id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = "${mod_name}"
version = "${rootProject.version}+${minecraft_version}-fabric"


loom {
    accessWidenerPath.set(file("src/main/resources/apugli.accesswidener"))
    mixin {
        defaultRefmapName.set("apugli.refmap.json")
    }

    mods {
        register(mod_id) {
            sourceSet(project(":common").sourceSets.main)
            sourceSet(project(":common").sourceSets.test)
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.test)
        }
    }
    runs {
        client {
            client()
            source(sourceSets.test)
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            vmArg("-Dmixin.debug.verbose=true")
            vmArg("-Dmixin.debug.export=true")
        }
        server {
            server()
            source(sourceSets.test)
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
            vmArg("-Dmixin.debug.verbose=true")
            vmArg("-Dmixin.debug.export=true")
        }
    }
}
repositories {
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name = "JitPack"
        url = 'https://jitpack.io'
    }
    maven {
        name = "Cafeteria"
        url = 'https://maven.cafeteria.dev'
        content {
            includeGroup 'net.adriantodt.fabricmc'
        }
    }
    maven {
        name = "Jamie's White Shirt"
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        name = "Shedaniel"
        url "https://maven.shedaniel.me/"
    }
    maven {
        name = "TerraformersMC"
        url "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name "QuiltMC"
        url "https://maven.quiltmc.org/repository/release"
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    mavenLocal()
}

dependencies {
    //Minecraft
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_version_loom}@zip")
    }
    //Fabric
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_version}")
    //ModMenu
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
    //Apoli
    modApi "com.github.apace100:apoli:${apoli_fabric_version}"
    //REA
    modApi "com.jamieswhiteshirt:reach-entity-attributes:${reach_version}"
    //MidNightLib
    include(modApi("maven.modrinth:midnightlib:${midnightlib_version}")) {
        exclude group: "net.fabricmc.fabricapi"
    }
    //MixinExtras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixin_extras_version}")))
    //JSR305
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    //Service
    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    //Pehkui
    modCompileOnly("com.github.Virtuoel:Pehkui:${pehkui_version}", {
        exclude group: "net.fabricmc.fabric-api"
    })
    // modLocalRuntime "com.github.Virtuoel:Pehkui:${pehkui_version}"
    //LazyDFU
    modLocalRuntime "maven.modrinth:lazydfu:0.1.3"
    //Relying on the Common Project for sure
    implementation project(path: ":common", configuration: "namedElements")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from(project(":common").sourceSets.main.resources)
    exclude("apugli.common.accesswidener")
}

processTestResources {
    from(project(":common").sourceSets.test.resources)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            name = "merchantpug"
            url = "https://maven.merchantpug.net/releases"
            credentials {
                username System.getenv('MAVEN_USERNAME')
                password System.getenv('MAVEN_PASSWORD')
            }
            authentication {
                create("basic", BasicAuthentication)
            }
        }
        mavenLocal()
    }
}

tasks.register('curseforge', TaskPublishCurseForge) {
    disableVersionDetection()
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(cf_project_id, remapJar)
    mainFile.displayName = "Fabric v${rootProject.version}+${minecraft_version}"
    mainFile.releaseType = "release"
    mainFile.changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    mainFile.changelogType = "markdown"
    fabric_mod_loaders.split(", ").each {
        mainFile.addModLoader(it)
    }
    fabric_game_versions.split(", ").each {
        mainFile.addGameVersion(it)
    }
    java_versions.split(", ").each {
        mainFile.addJavaVersion(it)
    }
    fabric_required_deps.split(", ").each {
        mainFile.addRequirement(it)
    }
    fabric_embedded_deps.split(", ").each {
        mainFile.addEmbedded(it)
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = mr_project_id
    versionNumber = "${version}"
    versionType = "release"
    versionName = "Fabric/Quilt v${rootProject.version}+${minecraft_version}"
    changelog = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    uploadFile = remapJar
    gameVersions = fabric_game_versions.split(", ").toList()
    loaders = fabric_mod_loaders.split(", ").collect { return it.toLowerCase(Locale.ROOT) }
    dependencies {
        fabric_required_deps.split(", ").each {
            required.project it
        }

        fabric_embedded_deps.split(", ").each {
            embedded.project it
        }
    }
}